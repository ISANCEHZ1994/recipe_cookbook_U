{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./shopping-list.service\";\nimport * as i2 from \"../../../logging.service\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"./shopping-edit/shopping-edit.component\";\n\nfunction ShoppingListComponent_a_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 4);\n    i0.ɵɵlistener(\"click\", function ShoppingListComponent_a_5_Template_a_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const i_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onEditItem(i_r2));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ingredient_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", ingredient_r1.name, \" (\", ingredient_r1.amount, \") \");\n  }\n}\n\nexport class ShoppingListComponent {\n  constructor(slService, logService, // so video shows an error on <:Store> how it was resolved was add genertic brakets\n  // connecting our reducer/action/ngrx\n  store) {\n    this.slService = slService;\n    this.logService = logService;\n    this.store = store;\n  }\n\n  ngOnInit() {\n    // we are using the newly created store (applying NgRx)\n    // .select() helps you select a slice of your state \n    // the 'slice' is identified by a string\n    // when using the store - it will replace EVERYTHING below!\n    this.ingredients = this.store.select('shoppingList'); // it should know what to look for because we have it created above!\n    // this.store.select('shoppingList'); would return an observable and so we want to store that observable - set to variable\n    // variable causes error because that name is stated at the begining however it is NOT a observable array\n    // ingredients: Ingredient[] ==>  ingredients: Observable<{ ingredients: Ingredient[] }>;\n    // NOTICE: the same data format as the store\n    // NOTICE: since we are changing the data, expect an error inside the shopping-list.compo.html \n    // the error happens because ngFor/let of loop is specifically for ARRAYS only thus we add the ASYNC PIPES\n    // Remember since we are swtiching to NgRX we are replacing the (two functions) below!\n    // this.ingredients = this.slService.getIngredients();\n    // again good practice to have Subscription in variable\n    // this.ingChangeSub = \n    // this.slService.ingredientsChanged.subscribe(\n    //   ( ingredients: Ingredient[] ) => {\n    //     this.ingredients = ingredients;\n    //   }\n    // );\n\n    this.logService.printLog(\"hello from shopping-list component - NgOnit\");\n  }\n\n  ngOnDestroy() {// this should be the recommended pattern - variable - subscribe - destroy/unsubscribe\n    // this.ingChangeSub.unsubscribe();\n    // NgRx is smart enough to unsubscribe on its own so no longer needed!\n  }\n\n  // related to the startedEditing variable inside of the shopping-list.service\n  // function used inside of the shopping-list.component.html\n  onEditItem(index) {\n    this.slService.startedEditing.next(index); // using store to dispatch an action - using NgRx\n  }\n\n}\n\nShoppingListComponent.ɵfac = function ShoppingListComponent_Factory(t) {\n  return new (t || ShoppingListComponent)(i0.ɵɵdirectiveInject(i1.ShoppingListService), i0.ɵɵdirectiveInject(i2.LoggingService), i0.ɵɵdirectiveInject(i3.Store));\n};\n\nShoppingListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ShoppingListComponent,\n  selectors: [[\"app-shopping-list\"]],\n  decls: 7,\n  vars: 3,\n  consts: [[1, \"row\"], [1, \"col-xs-10\"], [1, \"list-group\"], [\"class\", \"list-group-item\", \"style\", \"cursor: pointer;\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"list-group-item\", 2, \"cursor\", \"pointer\", 3, \"click\"]],\n  template: function ShoppingListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"app-shopping-edit\")(3, \"hr\");\n      i0.ɵɵelementStart(4, \"ul\", 2);\n      i0.ɵɵtemplate(5, ShoppingListComponent_a_5_Template, 2, 2, \"a\", 3);\n      i0.ɵɵpipe(6, \"async\");\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(6, 1, ctx.ingredients).ingredients);\n    }\n  },\n  dependencies: [i4.NgForOf, i5.ShoppingEditComponent, i4.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzaG9wcGluZy1saXN0LmNvbXBvbmVudC5jc3MifQ== */\"]\n});\n;","map":{"version":3,"mappings":";;;;;;;;;;;IAYYA;IAIIA;MAAA;MAAA;MAAA;MAAA,OAASA,uCAAT;IAAsB,CAAtB;IAGAA;IACJA;;;;;IADIA;IAAAA;;;;ACNhB,OAAM,MAAOC,qBAAP,CAA4B;EAOhCC,YACUC,SADV,EAEUC,UAFV,EAGE;EAEA;EACQC,KANV,EAYI;IAXM;IACA;IAIA;EAON;;EAEJC,QAAQ;IACN;IACA;IACA;IACA;IACA,KAAKC,WAAL,GAAmB,KAAKF,KAAL,CAAWG,MAAX,CAAkB,cAAlB,CAAnB,CALM,CAKgD;IACtD;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,KAAKJ,UAAL,CAAgBK,QAAhB,CAAyB,6CAAzB;EACD;;EAEDC,WAAW,IACP;IACA;IACA;EACH;;EAED;EACA;EACAC,UAAU,CAACC,KAAD,EAAc;IACtB,KAAKT,SAAL,CAAeU,cAAf,CAA8BC,IAA9B,CAAmCF,KAAnC,EADsB,CAEtB;EAED;;AA7D+B;;;mBAArBX,uBAAqBD;AAAA;;;QAArBC;EAAqBc;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDblCnB,+BAAiB,CAAjB,EAAiB,KAAjB,EAAiB,CAAjB;MAIQA,qCAAuC,CAAvC,EAAuC,IAAvC;MAGAA;MAKIA;;MASJA;;;;MAN+BA;MAAAA;;;;;;ACkEtC","names":["i0","ShoppingListComponent","constructor","slService","logService","store","ngOnInit","ingredients","select","printLog","ngOnDestroy","onEditItem","index","startedEditing","next","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Israel S. Sanchez\\Desktop\\Practice\\git clones\\Angular\\recipe_cookbook_U\\src\\app\\components\\ShoppingList\\shopping-list\\shopping-list.component.html","C:\\Users\\Israel S. Sanchez\\Desktop\\Practice\\git clones\\Angular\\recipe_cookbook_U\\src\\app\\components\\ShoppingList\\shopping-list\\shopping-list.component.ts"],"sourcesContent":["<div class=\"row\">\r\n    <div class=\"col-xs-10\">\r\n        <!-- Here is where we can add a new ingredient! -->\r\n        <!-- Remember now that we have it passing thru we can use/implement it in the other component -->\r\n        <app-shopping-edit></app-shopping-edit>\r\n        <!-- (ingredientAdded)=\"onIngredientAdded($event)\" -->\r\n        <hr>\r\n        <ul class=\"list-group\">\r\n            <!-- \r\n                we got rid of the href element \r\n                will later use this like a button would lead to unwanted behaviors \r\n            -->\r\n            <a  \r\n                class=\"list-group-item\" \r\n                style=\"cursor: pointer;\"\r\n                *ngFor=\"let ingredient of ( ingredients | async ).ingredients; let i = index\"\r\n                (click)=\"onEditItem(i)\"\r\n            >\r\n            <!-- now when we click on an ingredient below we can now see it in the inputs and change the ammount or name -->\r\n                {{ ingredient.name }}  ({{ ingredient.amount }})\r\n            </a>\r\n        </ul>\r\n    </div>\r\n</div>\r\n\r\n\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Subscription, Observable } from 'rxjs';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { LoggingService } from '../../../logging.service';\r\nimport { Ingredient } from '../../Shared/ingredient.model';\r\nimport { ShoppingListService } from './shopping-list.service';\r\n\r\n@Component({\r\n  selector: 'app-shopping-list',\r\n  templateUrl: './shopping-list.component.html',\r\n  styleUrls: ['./shopping-list.component.css']\r\n})\r\nexport class ShoppingListComponent implements OnInit, OnDestroy {\r\n\r\n  // ingredients: Ingredient[];\r\n  ingredients: Observable<{ ingredients: Ingredient[] }>;\r\n  // recommended practice to store subscription in property => ingChangeSub\r\n  private ingChangeSub: Subscription;\r\n\r\n  constructor( \r\n    private slService: ShoppingListService, \r\n    private logService: LoggingService,\r\n    // so video shows an error on <:Store> how it was resolved was add genertic brakets\r\n    \r\n    // connecting our reducer/action/ngrx\r\n    private store: Store<{\r\n    // NOTE: make sure the {key} is the same name as the key: in app.module in this case ==> shoppingList: shoppingListReducer  \r\n      shoppingList: {\r\n        // now we need the key: to be the same as the state name inside of shopping-list.reducer\r\n        ingredients: Ingredient[] // which is going to be an array of ingredients\r\n      } \r\n    }> \r\n  ) {};\r\n\r\n  ngOnInit(): void {\r\n    // we are using the newly created store (applying NgRx)\r\n    // .select() helps you select a slice of your state \r\n    // the 'slice' is identified by a string\r\n    // when using the store - it will replace EVERYTHING below!\r\n    this.ingredients = this.store.select('shoppingList'); // it should know what to look for because we have it created above!\r\n    // this.store.select('shoppingList'); would return an observable and so we want to store that observable - set to variable\r\n    // variable causes error because that name is stated at the begining however it is NOT a observable array\r\n    // ingredients: Ingredient[] ==>  ingredients: Observable<{ ingredients: Ingredient[] }>;\r\n    // NOTICE: the same data format as the store\r\n    // NOTICE: since we are changing the data, expect an error inside the shopping-list.compo.html \r\n    // the error happens because ngFor/let of loop is specifically for ARRAYS only thus we add the ASYNC PIPES\r\n\r\n    // Remember since we are swtiching to NgRX we are replacing the (two functions) below!\r\n    // this.ingredients = this.slService.getIngredients();\r\n\r\n    // again good practice to have Subscription in variable\r\n    // this.ingChangeSub = \r\n    // this.slService.ingredientsChanged.subscribe(\r\n    //   ( ingredients: Ingredient[] ) => {\r\n    //     this.ingredients = ingredients;\r\n    //   }\r\n    // );\r\n\r\n    this.logService.printLog(\"hello from shopping-list component - NgOnit\")\r\n  };\r\n\r\n  ngOnDestroy(): void {\r\n      // this should be the recommended pattern - variable - subscribe - destroy/unsubscribe\r\n      // this.ingChangeSub.unsubscribe();\r\n      // NgRx is smart enough to unsubscribe on its own so no longer needed!\r\n  };\r\n\r\n  // related to the startedEditing variable inside of the shopping-list.service\r\n  // function used inside of the shopping-list.component.html\r\n  onEditItem(index: number){\r\n    this.slService.startedEditing.next(index);\r\n    // using store to dispatch an action - using NgRx\r\n    \r\n  }; \r\n\r\n  // here is where we implement our data from the shopping edit component.ts\r\n  // onIngredientAdded(ingredient: Ingredient){\r\n  //   this.ingredients.push(ingredient);\r\n  // };\r\n\r\n};"]},"metadata":{},"sourceType":"module"}